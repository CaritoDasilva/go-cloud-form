{"version":3,"sources":["imgs/logo.png","components/Header.js","firestoreService/Firestore.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","src","logo","alt","FetchStudents","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","response","json","wrap","_context","prev","next","fetch","method","sent","abrupt","stop","apply","this","arguments","Forms","_getPrototypeOf2","_this","classCallCheck","_len","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","concat","updateInput","e","setState","defineProperty","target","name","value","validatorsForm","preventDefault","state","fullname","email","phone","rut","error","console","log","addRegister","createNewRegister","then","students","data","body","JSON","stringify","activatedError","novalidate","onSubmit","type","placeholder","required","minLength","onChange","pattern","title","Component","App","components_Header","Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc594c05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.37880436.png\";","import React from \"react\";\nimport logo from \"../imgs/logo.png\";\n\nconst Header = props => {\n  return (\n    <div className=\"header\">\n      <div className=\"card-body\">\n        <img className=\"logoPicture\" src={logo} alt=\"application logo\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","// import firebase from \"firebase\";\n// require(\"firebase/firestore\");\n\n// // Initialize Firebase\n// var config = {\n//   apiKey: \"AIzaSyCPijzExZEbxuytaCdBabSs8XMGjV6EaP4\",\n//   authDomain: \"go-cloud-challenge.firebaseapp.com\",\n//   databaseURL: \"https://go-cloud-challenge.firebaseio.com\",\n//   projectId: \"go-cloud-challenge\",\n//   storageBucket: \"\",\n//   messagingSenderId: \"734461660536\"\n// };\n// firebase.initializeApp(config);\n\n// // InitializeApp(config)\n// var db = firebase.firestore;\n\n// export default db;\n\nconst FetchStudents = async () => {\n  const url = 'https://us-central1-go-cloud-challenge-be.cloudfunctions.net/api/students';\n  const response = await fetch(url, { method: \"GET\" });\n  const json = await response.json();\n\n  return json;\n\n}\n\nexport default FetchStudents;\n","import React, { Component } from \"react\";\nimport FetchStudents from '../firestoreService/Firestore';\nimport { async } from \"q\";\n\n\nconst url = 'https://us-central1-go-cloud-challenge-be.cloudfunctions.net/api/students';\n/*global firebase*/\n// eslint-disable-next-line no-unused-vars\n// import firestore from \"../firestoreService/Firestore\";\n// import firebase from \"firebase\";\n\nclass Forms extends Component {\n  constructor(props, ...args) {\n    super(props, ...args);\n    this.state = {\n      fullname: \"\",\n      phone: \"\",\n      email: \"\",\n      rut: \"\",\n      error: false\n    };\n\n  }\n\n  componentDidMount() {\n    FetchStudents().then(students => {\n      console.log(students);\n    });\n  }\n\n  updateInput = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  async addRegister(state) {\n    const { fullname, phone, email, rut } = this.state;\n    console.log(state);\n    const data = {\n      fullname: this.state.fullname,\n      phone: this.state.phone,\n      email: this.state.email,\n      rut: this.state.rut\n    }\n    const response = await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n    const json = await response.json();\n\n\n    this.setState({\n      fullname: \"\",\n      phone: \"\",\n      email: \"\",\n      rut: \"\"\n    });\n  }\n\n  validatorsForm = e => {\n    e.preventDefault();\n    if (\n      this.state.fullname === \"\" ||\n      this.state.email === \"\" ||\n      this.state.phone === \"\" ||\n      this.state.rut === \"\"\n    ) {\n      this.setState({ error: true });\n      console.log(\"faltan campos por validar\");\n    } else {\n      this.setState({ error: false });\n      this.addRegister(this.state);\n      this.props.createNewRegister([this.state]);\n    }\n  };\n  render() {\n    const activatedError = this.state.error;\n    return (\n      <form\n        className=\"needs-validation\"\n        novalidate\n        onSubmit={this.validatorsForm}\n      >\n        <div className=\"form-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-8 col-lg-5\">\n              <label className=\"col-2 col-form-label\">Nombre:</label>\n              <input\n                type=\"text\"\n                name=\"fullname\"\n                className=\"form-control\"\n                placeholder=\"Ej. José Canseco\"\n                required\n                minLength=\"3\"\n                onChange={this.updateInput}\n                value={this.state.fullname}\n              />\n            </div>\n\n            <div className=\"col-sm-8 col-lg-5\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Teléfono:\n              </label>\n              <input\n                type=\"text\"\n                name=\"phone\"\n                className=\"form-control\"\n                placeholder=\"Ej. +569 3772 9376\"\n                required\n                pattern=\"^\\+569[0-9]{8}$\"\n                minLength=\"10\"\n                title=\"Debe ser un Teléfono válido\"\n                onChange={this.updateInput}\n                value={this.state.phone}\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-8 col-lg-5\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Correo:\n              </label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                className=\"form-control\"\n                placeholder=\"Ej. correo@gmail.com\"\n                required\n                onChange={this.updateInput}\n                value={this.state.email}\n              />\n            </div>\n            <div className=\"col-sm-8 col-lg-5\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Rut:</label>\n              <input\n                type=\"text\"\n                name=\"rut\"\n                className=\"form-control\"\n                placeholder=\"Ej. 26.492.283-1\"\n                required\n                pattern=\"\\d{3,8}-[\\d|kK]{1}\"\n                title=\"Debe ser un Rut válido\"\n                onChange={this.updateInput}\n                value={this.state.rut}\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-8 col-lg-10 submitbtn\">\n              <button type=\"submit\" className=\"btn btn-lg btn-block text-white\">\n                Inscribirse\n              </button>\n            </div>\n          </div>\n        </div>\n        {activatedError ? (\n          <div className=\"col-8 alert alert-danger text-center\">\n            Todos los campos son obligatorios\n          </div>\n        ) : (\n            \"\"\n          )}\n      </form>\n    );\n  }\n}\n\nexport default Forms;\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Forms from \"./components/Form\";\nimport \"./App.css\";\n\nclass App extends Component {\n  createNewRegister = state => {\n    console.log(\"Se envía desde Forms\");\n    console.log(state);\n  };\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container-fluid screen\">\n          <div className=\"row title1\">\n            <div className=\"col-sm-4 col-lg-6 text-center\">\n              <h1 className=\"title1\">Cursos de Verano +NEM</h1>\n            </div>\n          </div>\n          <div className=\"row title2\">\n            <div className=\"col-sm-12 col-lg-10 text-center\">\n              <h4>No dejes pasar esta increíble oportunidad. Inscríbete acá</h4>\n            </div>\n          </div>\n\n          <Forms createNewRegister={this.createNewRegister} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}